{"version":3,"sources":["webpack:///./demo/$_lazy_route_resource lazy namespace object","webpack:///./demo/main.ts","webpack:///./demo/src/demo.component.html","webpack:///./demo/src/demo.component.ts","webpack:///./demo/src/demo.module.ts","webpack:///./demo/src/demo.routes.ts","webpack:///./demo/src/installation.component.html","webpack:///./demo/src/installation.component.ts","webpack:///./demo/src/invisible-recaptcha-demo.component.html","webpack:///./demo/src/invisible-recaptcha-demo.component.ts","webpack:///./demo/src/re-captcha-2-demo.component.html","webpack:///./demo/src/re-captcha-2-demo.component.ts","webpack:///./demo/src/re-captcha-3-demo.component.html","webpack:///./demo/src/re-captcha-3-demo.component.ts","webpack:///./projects/ngx-captcha-lib/src/lib/components/base-recaptcha.component.ts","webpack:///./projects/ngx-captcha-lib/src/lib/components/invisible-recaptcha.component.ts","webpack:///./projects/ngx-captcha-lib/src/lib/components/recaptcha-2.component.ts","webpack:///./projects/ngx-captcha-lib/src/lib/index.ts","webpack:///./projects/ngx-captcha-lib/src/lib/models/recaptcha-type.enum.ts","webpack:///./projects/ngx-captcha-lib/src/lib/ngx-captcha.module.ts","webpack:///./projects/ngx-captcha-lib/src/lib/services/recaptcha_v3.service.ts","webpack:///./projects/ngx-captcha-lib/src/lib/services/script.service.ts","webpack:///./projects/ngx-captcha-lib/src/public_api.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./demo/$$_lazy_route_resource lazy recursive\";","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { DemoModule } from './src/demo.module';\r\n\r\nplatformBrowserDynamic().bootstrapModule(DemoModule)\r\n  .catch(err => console.log(err));\r\n","module.exports = \"<header>\\r\\n    <nav class=\\\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\\\">\\r\\n        <a class=\\\"navbar-brand\\\" routerLink=\\\"/installation\\\">Google reCaptcha for Angular</a>\\r\\n        <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarCollapse\\\" aria-controls=\\\"navbarCollapse\\\"\\r\\n            aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\r\\n            <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n        </button>\\r\\n        <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarCollapse\\\">\\r\\n            <ul class=\\\"navbar-nav mr-auto\\\">\\r\\n                <li class=\\\"nav-item\\\">\\r\\n                    <a class=\\\"nav-link \\\" routerLink=\\\"/installation\\\">Quick start</a>\\r\\n                </li>\\r\\n                <li class=\\\"nav-item\\\">\\r\\n                    <a class=\\\"nav-link \\\" routerLink=\\\"/recaptcha2\\\">reCaptcha v2</a>\\r\\n                </li>\\r\\n                <li class=\\\"nav-item\\\">\\r\\n                    <a class=\\\"nav-link \\\" routerLink=\\\"/recaptcha3\\\">reCaptcha v3</a>\\r\\n                </li>\\r\\n                <li class=\\\"nav-item\\\">\\r\\n                    <a class=\\\"nav-link \\\" routerLink=\\\"/invisible\\\">Invisible reCaptcha</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n            <div class=\\\"mt-2 mt-md-0\\\">\\r\\n                <a href=\\\"https://github.com/Enngage/ngx-captcha\\\">\\r\\n                    <button class=\\\"btn my-2 my-sm-0\\\" type=\\\"submit\\\">GitHub</button>\\r\\n                </a>\\r\\n            </div>\\r\\n        </div>\\r\\n    </nav>\\r\\n</header>\\r\\n\\r\\n<main role=\\\"main\\\" style=\\\"margin-top: 90px\\\">\\r\\n    <div class=\\\"container\\\" id=\\\"highlight\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n    </div>\\r\\n</main>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './demo.component.html',\r\n})\r\nexport class DemoComponent {\r\n\r\n  public year = new Date().getFullYear();\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { NgxCaptchaModule } from '../../projects/ngx-captcha-lib/src/lib';\r\nimport { DemoComponent } from './demo.component';\r\nimport { DemoRoutes } from './demo.routes';\r\nimport { InstallationComponent } from './installation.component';\r\nimport { InvisibleReCaptchaDemoComponent } from './invisible-recaptcha-demo.component';\r\nimport { ReCaptcha2DemoComponent } from './re-captcha-2-demo.component';\r\nimport { ReCaptcha3DemoComponent } from './re-captcha-3-demo.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgxCaptchaModule,\r\n    DemoRoutes\r\n  ],\r\n  declarations: [\r\n    DemoComponent,\r\n    InvisibleReCaptchaDemoComponent,\r\n    ReCaptcha2DemoComponent,\r\n    InstallationComponent,\r\n    ReCaptcha3DemoComponent\r\n  ],\r\n\r\n  bootstrap: [DemoComponent]\r\n})\r\nexport class DemoModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { InstallationComponent } from './installation.component';\r\nimport { InvisibleReCaptchaDemoComponent } from './invisible-recaptcha-demo.component';\r\nimport { ReCaptcha2DemoComponent } from './re-captcha-2-demo.component';\r\nimport { ReCaptcha3DemoComponent } from './re-captcha-3-demo.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n    ],\r\n    imports: [\r\n        RouterModule.forRoot([\r\n            {\r\n                path: '', component: ReCaptcha2DemoComponent\r\n            },\r\n            {\r\n                path: 'installation', component: InstallationComponent\r\n            },\r\n            {\r\n                path: 'invisible', component: InvisibleReCaptchaDemoComponent\r\n            },\r\n            {\r\n                path: 'recaptcha2', component: ReCaptcha2DemoComponent\r\n            },\r\n            {\r\n                path: 'recaptcha3', component: ReCaptcha3DemoComponent\r\n            },\r\n        ])\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class DemoRoutes { }\r\n","module.exports = \"\\r\\n<h3>Supported versions</h3>\\r\\n\\r\\n<div>For Angular 6 use ngx-captcha on version 5.0.0 or lower</div>\\r\\n<div>For Angular 7 use ngx-captcha on version 6.0.0 or higher</div>\\r\\n\\r\\n<h2 class=\\\"mt-4\\\">Installation</h2>\\r\\n\\r\\n\\r\\n<h5 class=\\\"mt-4\\\">npm</h5>\\r\\n\\r\\n<pre class=\\\"mt-2\\\">\\r\\n    <code [innerText]=\\\"installCode\\\"></code>\\r\\n</pre>\\r\\n\\r\\n<h5 class=\\\"mt-4\\\">Import\\r\\n    <strong>NgxCaptchaModule</strong> module \\r\\n</h5>\\r\\n\\r\\n<pre class=\\\"mt-2\\\">\\r\\n    <code [innerText]=\\\"importModuleCode\\\"></code>\\r\\n</pre>\\r\\n\\r\\n<h5 class=\\\"mt-4\\\">Use</h5>\\r\\n\\r\\n<pre class=\\\"mt-2\\\">\\r\\n    <code [innerText]=\\\"templateCode\\\"></code>\\r\\n</pre>\\r\\n\\r\\n<pre class=\\\"mt-2\\\">\\r\\n    <code [innerText]=\\\"tsCode\\\"></code>\\r\\n</pre>\\r\\n\"","import { AfterViewInit, Component } from '@angular/core';\r\n\r\ndeclare var hljs: any;\r\n\r\n@Component({\r\n  templateUrl: './installation.component.html',\r\n})\r\nexport class InstallationComponent implements AfterViewInit {\r\n\r\n  public readonly installCode = `npm install ngx-captcha --save`;\r\n\r\n  public readonly importModuleCode = `import { NgModule } from '@angular/core';\r\nimport { NgxCaptchaModule } from 'ngx-captcha';\r\n\r\n@NgModule({\r\n  imports: [\r\n    ....,\r\n    NgxCaptchaModule\r\n  })\r\n\r\nexport class AppModule { }\r\n\r\n`;\r\n\r\n  public readonly templateCode = `<form [formGroup]=\"aFormGroup\">\r\n  <ngx-recaptcha2\r\n    [siteKey]=\"siteKey\"\r\n    [size]=\"size\"\r\n    [hl]=\"lang\"\r\n    [theme]=\"theme\"\r\n    [type]=\"type\"\r\n    [useGlobalDomain]=\"false\"\r\n    (reset)=\"handleReset()\"\r\n    (expire)=\"handleExpire()\"\r\n    (load)=\"handleLoad()\"\r\n    (success)=\"handleSuccess($event)\"\r\n    formControlName=\"recaptcha\">\r\n  </ngx-recaptcha2>\r\n</form>\r\n\r\n`;\r\n\r\n  public readonly tsCode = `export class YourComponent implements OnInit {\r\n    protected aFormGroup: FormGroup;\r\n\r\n    constructor(private formBuilder: FormBuilder) {}\r\n\r\n    ngOnInit() {\r\n      this.aFormGroup = this.formBuilder.group({\r\n        recaptcha: ['', Validators.required]\r\n      });\r\n    }\r\n  }\r\n`;\r\n\r\n  ngAfterViewInit(): void {\r\n    this.highlight();\r\n  }\r\n\r\n  private highlight(): void {\r\n    const highlightBlocks = document.getElementsByTagName('code');\r\n    for (let i = 0; i < highlightBlocks.length; i++) {\r\n      const block = highlightBlocks[i];\r\n      hljs.highlightBlock(block);\r\n    }\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"row featurette\\\">\\r\\n    <div class=\\\"col-md-7\\\">\\r\\n        <h2 class=\\\"featurette-heading\\\">Invisible reCAPTCHA\\r\\n        </h2>\\r\\n\\r\\n        <p class=\\\"mt-4\\\">\\r\\n            This is a completely dynamic implementation - try changing properties to immediately see changes in rendered captcha.\\r\\n        </p>\\r\\n\\r\\n        <table class=\\\"table mt-3\\\">\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <th>Property</th>\\r\\n                    <th>Values</th>\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n                <tr>\\r\\n                    <td>Badge</td>\\r\\n                    <td>\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeBadge('bottomright')\\\">Bottomright</span> |\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeBadge('bottomleft')\\\">Bottomleft</span> |\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeBadge('inline')\\\">Inline</span>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>Type</td>\\r\\n                    <td>\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeType('image')\\\">Image</span> |\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeType('audio')\\\">Audio</span>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>Theme</td>\\r\\n                    <td>\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeTheme('light')\\\">Light</span> |\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeTheme('dark')\\\">Dark</span>\\r\\n                    </td>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n\\r\\n        <table class=\\\"table mt-3\\\">\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <th>Method</th>\\r\\n                    <th>Description</th>\\r\\n                    <th>Action</th>\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n                <tr>\\r\\n                    <td>execute</td>\\r\\n                    <td>Verifies captcha on the backround and returns captcha response</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"execute()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>getCurrentResponse</td>\\r\\n                    <td>Gets the latest submitted response</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"getCurrentResponse()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>getResponse</td>\\r\\n                    <td>Gets captcha response</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"getResponse()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>reset</td>\\r\\n                    <td>Resets captcha (does not reload script)</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"reset()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>reload</td>\\r\\n                    <td>Unsets global script & reloads captcha</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"reload()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>getCaptchaId</td>\\r\\n                    <td>Gets Id of captcha</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"getCaptchaId()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-5\\\">\\r\\n        <h4>Live example</h4>\\r\\n        <ngx-invisible-recaptcha #captchaElem\\r\\n                                 [siteKey]=\\\"siteKey\\\"\\r\\n                                 (reset)=\\\"handleReset()\\\"\\r\\n                                 (ready)=\\\"handleReady()\\\"\\r\\n                                 (load)=\\\"handleLoad()\\\"\\r\\n                                 (success)=\\\"handleSuccess($event)\\\"\\r\\n                                 [useGlobalDomain]=\\\"false\\\"\\r\\n                                 [type]=\\\"type\\\"\\r\\n                                 [theme]=\\\"theme\\\"\\r\\n                                 [badge]=\\\"badge\\\"\\r\\n                                 [ngModel]=\\\"recaptcha\\\"\\r\\n                                 [ngModelOptions]=\\\"{ standalone: true }\\\">\\r\\n        </ngx-invisible-recaptcha>\\r\\n\\r\\n        <h4 class=\\\"mt-3\\\">Status</h4>\\r\\n        <div>\\r\\n            <ul class=\\\"alt\\\">\\r\\n                <li>\\r\\n                    <span>Loaded: </span>\\r\\n                    <i *ngIf=\\\"!captchaIsLoaded\\\" class=\\\"fas fa-times text-danger\\\"></i>\\r\\n                    <i *ngIf=\\\"captchaIsLoaded\\\" class=\\\"fas fa-check text-success\\\"></i>\\r\\n                </li>\\r\\n                <li>\\r\\n                    <span>Captcha ready: </span>\\r\\n                    <i *ngIf=\\\"!captchaIsReady\\\" class=\\\"fas fa-times text-danger\\\"></i>\\r\\n                    <i *ngIf=\\\"captchaIsReady\\\" class=\\\"fas fa-check text-success\\\"></i>\\r\\n                </li>\\r\\n                <li>\\r\\n                    <span>Captcha success: </span>\\r\\n                    <i *ngIf=\\\"!captchaSuccess\\\" class=\\\"fas fa-times text-danger\\\"></i>\\r\\n                    <i *ngIf=\\\"captchaSuccess\\\" class=\\\"fas fa-check text-success\\\"></i>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </div>\\r\\n\\r\\n        <h4 class=\\\"mt-3\\\">Code</h4>\\r\\n\\r\\n        <pre class=\\\"mt-2\\\">\\r\\n            <code [innerText]=\\\"exampleCode\\\"></code>\\r\\n        </pre>\\r\\n    </div>\\r\\n</div>\\r\\n\"","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\r\n\r\nimport { InvisibleReCaptchaComponent } from '../../projects/ngx-captcha-lib/src/public_api';\r\n\r\ndeclare var hljs: any;\r\n\r\n@Component({\r\n  selector: 'ngx-invisible-recaptcha-demo',\r\n  templateUrl: './invisible-recaptcha-demo.component.html',\r\n})\r\nexport class InvisibleReCaptchaDemoComponent implements AfterViewInit {\r\n\r\n  public readonly siteKey = '6LckpEgUAAAAACPcjmrg1Es-GnTltKx0MP61FBO8';\r\n\r\n  public readonly exampleCode = `<ngx-invisible-recaptcha #captchaElem\r\n  [siteKey]=\"siteKey\"\r\n  (reset)=\"handleReset()\"\r\n  (ready)=\"handleReady()\"\r\n  (load)=\"handleLoad()\"\r\n  (success)=\"handleSuccess($event)\"\r\n  [useGlobalDomain]=\"false\"\r\n  [theme]=\"theme\"\r\n  [type]=\"type\"\r\n  [badge]=\"badge\"\r\n  [ngModel]=\"recaptcha\"\r\n  [ngModelOptions]=\"{ standalone: true }\">\r\n</ngx-invisible-recaptcha>\r\n`;\r\n\r\n  public captchaIsLoaded = false;\r\n  public captchaSuccess = false;\r\n  public captchaResponse?: string;\r\n  public captchaIsReady = false;\r\n\r\n  public badge: 'bottomright' | 'bottomleft' | 'inline' = 'inline';\r\n  public type: 'image' | 'audio';\r\n  public theme: 'light' | 'dark' = 'light';\r\n\r\n  public recaptcha: any = null;\r\n\r\n  @ViewChild('captchaElem') captchaElem: InvisibleReCaptchaComponent;\r\n  @ViewChild('langInput') langInput: ElementRef;\r\n\r\n\r\n\r\n  constructor(private cdr: ChangeDetectorRef) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.captchaIsLoaded = true;\r\n    this.cdr.detectChanges();\r\n    this.highlight();\r\n  }\r\n\r\n  execute(): void {\r\n    this.captchaElem.execute();\r\n  }\r\n\r\n  handleReset(): void {\r\n    this.captchaSuccess = false;\r\n    this.captchaResponse = undefined;\r\n  }\r\n\r\n  handleSuccess(captchaResponse: string): void {\r\n    this.captchaSuccess = true;\r\n    this.captchaResponse = captchaResponse;\r\n  }\r\n\r\n  handleLoad(): void {\r\n    this.captchaIsLoaded = true;\r\n  }\r\n\r\n  handleReady(): void {\r\n    this.captchaIsReady = true;\r\n  }\r\n\r\n  changeBadge(badge: 'bottomright' | 'bottomleft' | 'inline' = 'bottomright'): void {\r\n    this.badge = badge;\r\n  }\r\n\r\n  changeType(type: 'image' | 'audio'): void {\r\n    this.type = type;\r\n  }\r\n\r\n  getResponse(): void {\r\n    const response = this.captchaElem.getResponse();\r\n    if (!response) {\r\n      alert(`There is no response from grecaptcha script - try using 'getCurrentResponse' method or subscribe to 'success' event`);\r\n    } else {\r\n      alert(response);\r\n    }\r\n  }\r\n\r\n  reload(): void {\r\n    this.captchaElem.reloadCaptcha();\r\n  }\r\n\r\n  getCaptchaId(): void {\r\n    alert(this.captchaElem.getCaptchaId());\r\n  }\r\n\r\n  reset(): void {\r\n    this.captchaElem.resetCaptcha();\r\n  }\r\n\r\n  getCurrentResponse(): void {\r\n    const currentResponse = this.captchaElem.getCurrentResponse();\r\n    if (!currentResponse) {\r\n      alert('There is no current response - have you submitted captcha?');\r\n    } else {\r\n      alert(currentResponse);\r\n    }\r\n  }\r\n\r\n  changeTheme(theme: 'light' | 'dark'): void {\r\n    this.theme = theme;\r\n  }\r\n\r\n  private highlight(): void {\r\n    const highlightBlocks = document.getElementsByTagName('code');\r\n    for (let i = 0; i < highlightBlocks.length; i++) {\r\n      const block = highlightBlocks[i];\r\n      hljs.highlightBlock(block);\r\n    }\r\n  }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"aFormGroup\\\">\\r\\n  <div class=\\\"row featurette\\\">\\r\\n      <div class=\\\"col-md-7\\\">\\r\\n          <h2 class=\\\"featurette-heading\\\">Google reCAPTCHA2\\r\\n          </h2>\\r\\n\\r\\n          <p class=\\\"mt-4\\\">\\r\\n              This is a completely dynamic implementation - try changing properties to immediately see changes in rendered captcha.\\r\\n          </p>\\r\\n\\r\\n          <table class=\\\"table mt-3\\\">\\r\\n              <thead>\\r\\n                  <tr>\\r\\n                      <th>Property</th>\\r\\n                      <th>Values</th>\\r\\n                  </tr>\\r\\n              </thead>\\r\\n              <tbody>\\r\\n                  <tr>\\r\\n                      <td>Theme</td>\\r\\n                      <td>\\r\\n                          <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeTheme('light')\\\">Light</span> |\\r\\n                          <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeTheme('dark')\\\">Dark</span>\\r\\n                      </td>\\r\\n                  </tr>\\r\\n                  <tr>\\r\\n                      <td>Language</td>\\r\\n                      <td>\\r\\n                          <div class=\\\"input-group\\\">\\r\\n                              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Culture code (i.e. 'en', 'es')\\\" #langInput [value]=\\\"lang\\\">\\r\\n                              <div class=\\\"input-group-append\\\">\\r\\n                                  <button class=\\\"btn btn-info\\\" (click)=\\\"setLanguage()\\\">Set</button>\\r\\n                              </div>\\r\\n                          </div>\\r\\n                      </td>\\r\\n                  </tr>\\r\\n                  <tr>\\r\\n                      <td>Size</td>\\r\\n                      <td>\\r\\n                          <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeSize('compact')\\\">Compact</span> |\\r\\n                          <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeSize('normal')\\\">Normal</span>\\r\\n                      </td>\\r\\n                  </tr>\\r\\n                  <tr>\\r\\n                      <td>Type</td>\\r\\n                      <td>\\r\\n                          <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeType('image')\\\">Image</span> |\\r\\n                          <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeType('audio')\\\">Audio</span>\\r\\n                      </td>\\r\\n                  </tr>\\r\\n                  <tr>\\r\\n                    <td>Use global domain</td>\\r\\n                    <td>\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"setUseGlobalDomain(true)\\\">Yes</span> |\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"setUseGlobalDomain(false)\\\">No</span>\\r\\n                    </td>\\r\\n                </tr>\\r\\n              </tbody>\\r\\n          </table>\\r\\n\\r\\n          <table class=\\\"table mt-3\\\">\\r\\n              <thead>\\r\\n                  <tr>\\r\\n                      <th>Method</th>\\r\\n                      <th>Description</th>\\r\\n                      <th>Action</th>\\r\\n                  </tr>\\r\\n              </thead>\\r\\n              <tbody>\\r\\n                  <tr>\\r\\n                      <td>getCurrentResponse</td>\\r\\n                      <td>Gets the latest submitted response</td>\\r\\n                      <td>\\r\\n                          <button class=\\\"btn btn-info\\\" (click)=\\\"getCurrentResponse()\\\">Try</button>\\r\\n                      </td>\\r\\n                  </tr>\\r\\n                  <tr>\\r\\n                      <td>getResponse</td>\\r\\n                      <td>Gets captcha response</td>\\r\\n                      <td>\\r\\n                          <button class=\\\"btn btn-info\\\" (click)=\\\"getResponse()\\\">Try</button>\\r\\n                      </td>\\r\\n                  </tr>\\r\\n                  <tr>\\r\\n                      <td>reset</td>\\r\\n                      <td>Resets captcha (does not reload script)</td>\\r\\n                      <td>\\r\\n                          <button class=\\\"btn btn-info\\\" (click)=\\\"reset()\\\">Try</button>\\r\\n                      </td>\\r\\n                  </tr>\\r\\n                  <tr>\\r\\n                      <td>reload</td>\\r\\n                      <td>Unsets global script & reloads captcha</td>\\r\\n                      <td>\\r\\n                          <button class=\\\"btn btn-info\\\" (click)=\\\"reload()\\\">Try</button>\\r\\n                      </td>\\r\\n                  </tr>\\r\\n                  <tr>\\r\\n                      <td>getCaptchaId</td>\\r\\n                      <td>Gets Id of captcha</td>\\r\\n                      <td>\\r\\n                          <button class=\\\"btn btn-info\\\" (click)=\\\"getCaptchaId()\\\">Try</button>\\r\\n                      </td>\\r\\n                  </tr>\\r\\n              </tbody>\\r\\n          </table>\\r\\n      </div>\\r\\n      <div class=\\\"col-md-5\\\">\\r\\n          <h4>Live example</h4>\\r\\n          <ngx-recaptcha2 #captchaElem\\r\\n                          [siteKey]=\\\"siteKey\\\"\\r\\n                          (reset)=\\\"handleReset()\\\"\\r\\n                          (expire)=\\\"handleExpire()\\\"\\r\\n                          (load)=\\\"handleLoad()\\\"\\r\\n                          (success)=\\\"handleSuccess($event)\\\"\\r\\n                          [useGlobalDomain]=\\\"useGlobalDomain\\\"\\r\\n                          [size]=\\\"size\\\"\\r\\n                          [hl]=\\\"lang\\\"\\r\\n                          [theme]=\\\"theme\\\"\\r\\n                          [type]=\\\"type\\\"\\r\\n                          formControlName=\\\"recaptcha\\\">\\r\\n          </ngx-recaptcha2>\\r\\n\\r\\n          <h4 class=\\\"mt-3\\\">Status</h4>\\r\\n          <div>\\r\\n              <ul class=\\\"alt\\\">\\r\\n                  <li>\\r\\n                      <span>Loaded: </span>\\r\\n                      <i *ngIf=\\\"!captchaIsLoaded\\\" class=\\\"fas fa-times text-danger\\\"></i>\\r\\n                      <i *ngIf=\\\"captchaIsLoaded\\\" class=\\\"fas fa-check text-success\\\"></i>\\r\\n                  </li>\\r\\n                  <li>\\r\\n                      <span>Captcha success: </span>\\r\\n                      <i *ngIf=\\\"!captchaSuccess\\\" class=\\\"fas fa-times text-danger\\\"></i>\\r\\n                      <i *ngIf=\\\"captchaSuccess\\\" class=\\\"fas fa-check text-success\\\"></i>\\r\\n                  </li>\\r\\n                  <li>\\r\\n                      <span>Captcha expired: </span>\\r\\n                      <i *ngIf=\\\"!captchaIsExpired\\\" class=\\\"fas fa-times text-danger\\\"></i>\\r\\n                      <i *ngIf=\\\"captchaIsExpired\\\" class=\\\"fas fa-check text-success\\\"></i>\\r\\n                  </li>\\r\\n              </ul>\\r\\n          </div>\\r\\n\\r\\n          <h4 class=\\\"mt-3\\\">Code</h4>\\r\\n\\r\\n          <pre class=\\\"mt-2\\\">\\r\\n              <code [innerText]=\\\"exampleCode\\\"></code>\\r\\n              <code [innerText]=\\\"exampleTsCode\\\"></code>\\r\\n          </pre>\\r\\n           \\r\\n      </div>\\r\\n  </div>\\r\\n</form>\\r\\n\"","import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef, OnInit,\r\n  ViewChild\r\n} from '@angular/core';\r\n\r\nimport { ReCaptcha2Component } from '../../projects/ngx-captcha-lib/src/public_api';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\ndeclare var hljs: any;\r\n\r\n@Component({\r\n  selector: 'ngx-recaptcha-2-demo',\r\n  templateUrl: './re-captcha-2-demo.component.html'\r\n})\r\nexport class ReCaptcha2DemoComponent implements OnInit, AfterViewInit {\r\n\r\n  public readonly siteKey = '6LcvoUgUAAAAAJJbhcXvLn3KgG-pyULLusaU4mL1';\r\n\r\n  public readonly installCode = `\r\n  npm install ngx-captcha`;\r\n\r\n  public readonly importModuleCode = `\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxCaptchaModule } from 'ngx-captcha';\r\n\r\n@NgModule({\r\n  imports: [\r\n    NgxCaptchaModule\r\n  })\r\n\r\n  export class AppModule { }`;\r\n\r\n  public readonly exampleCode = `<form [formGroup]=\"aFormGroup\">\r\n  <ngx-recaptcha2 #captchaElem\r\n    [siteKey]=\"siteKey\"\r\n    (reset)=\"handleReset()\"\r\n    (expire)=\"handleExpire()\"\r\n    (load)=\"handleLoad()\"\r\n    (success)=\"handleSuccess($event)\"\r\n    [useGlobalDomain]=\"false\"\r\n    [size]=\"size\"\r\n    [hl]=\"lang\"\r\n    [theme]=\"theme\"\r\n    [type]=\"type\"\r\n    formControlName=\"recaptcha\">\r\n  </ngx-recaptcha2>\r\n</form>\r\n`;\r\n\r\n  public readonly exampleTsCode = `class YourComponent implements OnInit {\r\n    public aFormGroup: FormGroup;\r\n\r\n    constructor(\r\n      private formBuilder: FormBuilder) {}\r\n\r\n    ngOnInit() {\r\n      this.aFormGroup = this.formBuilder.group({\r\n        recaptcha: ['', Validators.required]\r\n      });\r\n    }\r\n  }\r\n  `;\r\n\r\n  public captchaIsLoaded = false;\r\n  public captchaSuccess = false;\r\n  public captchaIsExpired = false;\r\n  public captchaResponse?: string;\r\n\r\n  public theme: 'light' | 'dark' = 'light';\r\n  public size: 'compact' | 'normal' = 'normal';\r\n  public lang = 'en';\r\n  public type: 'image' | 'audio';\r\n  public useGlobalDomain: boolean = false;\r\n\r\n  @ViewChild('captchaElem') captchaElem: ReCaptcha2Component;\r\n  @ViewChild('langInput') langInput: ElementRef;\r\n  public aFormGroup: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder) {}\r\n\r\n  ngOnInit() {\r\n    this.aFormGroup = this.formBuilder.group({\r\n      recaptcha: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.highlight();\r\n  }\r\n\r\n  handleReset(): void {\r\n    this.captchaSuccess = false;\r\n    this.captchaResponse = undefined;\r\n    this.captchaIsExpired = false;\r\n  }\r\n\r\n  handleSuccess(captchaResponse: string): void {\r\n    this.captchaSuccess = true;\r\n    this.captchaResponse = captchaResponse;\r\n    this.captchaIsExpired = false;\r\n  }\r\n\r\n  handleLoad(): void {\r\n    this.captchaIsLoaded = true;\r\n    this.captchaIsExpired = false;\r\n  }\r\n\r\n  handleExpire(): void {\r\n    this.captchaSuccess = false;\r\n    this.captchaIsExpired = true;\r\n  }\r\n\r\n  changeTheme(theme: 'light' | 'dark'): void {\r\n    this.theme = theme;\r\n  }\r\n\r\n  changeSize(size: 'compact' | 'normal'): void {\r\n    this.size = size;\r\n  }\r\n\r\n  changeType(type: 'image' | 'audio'): void {\r\n    this.type = type;\r\n  }\r\n\r\n  setLanguage(): void {\r\n    this.lang = this.langInput.nativeElement.value;\r\n  }\r\n\r\n  setUseGlobalDomain(use: boolean): void {\r\n    this.useGlobalDomain = use;\r\n  }\r\n\r\n  getCurrentResponse(): void {\r\n    const currentResponse = this.captchaElem.getCurrentResponse();\r\n    if (!currentResponse) {\r\n      alert('There is no current response - have you submitted captcha?');\r\n    } else {\r\n      alert(currentResponse);\r\n    }\r\n  }\r\n\r\n  getResponse(): void {\r\n    const response = this.captchaElem.getResponse();\r\n    if (!response) {\r\n      alert('There is no response - have you submitted captcha?');\r\n    } else {\r\n      alert(response);\r\n    }\r\n  }\r\n\r\n  reload(): void {\r\n    this.captchaElem.reloadCaptcha();\r\n  }\r\n\r\n  getCaptchaId(): void {\r\n    alert(this.captchaElem.getCaptchaId());\r\n  }\r\n\r\n  reset(): void {\r\n    this.captchaElem.resetCaptcha();\r\n  }\r\n\r\n  private highlight(): void {\r\n    const highlightBlocks = document.getElementsByTagName('code');\r\n    for (let i = 0; i < highlightBlocks.length; i++) {\r\n      const block = highlightBlocks[i];\r\n      hljs.highlightBlock(block);\r\n    }\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"row featurette\\\">\\r\\n    <div class=\\\"col-md-7\\\">\\r\\n        <h2 class=\\\"featurette-heading\\\">reCaptcha v3\\r\\n        </h2>\\r\\n\\r\\n        <p class=\\\"mt-4\\\">\\r\\n            This is the implementation of <em>beta</em> version of google reCaptcha v3 as per following documentation:\\r\\n            <a href=\\\"https://developers.google.com/recaptcha/docs/v3\\\">https://developers.google.com/recaptcha/docs/v3</a>\\r\\n        </p>\\r\\n\\r\\n        <p class=\\\"mt-3\\\">\\r\\n            First you need to inject the <em></em> class in your component / service and then use <em>Execute</em>\\r\\n            method with your action. Once you have the token, you need to verify it on your backend to get meaningful\\r\\n            results. See official google documentation for more details.\\r\\n        </p>\\r\\n\\r\\n        <pre class=\\\"mt-2\\\">\\r\\n            <code [innerText]=\\\"constructorCode\\\"></code>\\r\\n            <code [innerText]=\\\"methodCode\\\"></code>\\r\\n        </pre>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-md-5\\\">\\r\\n        <h4>Live example</h4>\\r\\n\\r\\n        <table class=\\\"table mt-3\\\">\\r\\n            <tbody>\\r\\n                <tr>\\r\\n                    <td>Site key</td>\\r\\n                    <td>\\r\\n                        <div class=\\\"input-group\\\">\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Your site key\\\" [(ngModel)]=\\\"siteKey\\\">\\r\\n                        </div>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>Action</td>\\r\\n                    <td>\\r\\n                        <div class=\\\"input-group\\\">\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Action\\\" [(ngModel)]=\\\"action\\\">\\r\\n                        </div>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td colspan=\\\"2\\\">\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"execute()\\\">Execute</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n\\r\\n        <h4>Your token: </h4>\\r\\n\\r\\n        <div class=\\\"mt-2\\\">\\r\\n            <div *ngIf=\\\"error\\\" class=\\\"color-red\\\">\\r\\n                {{ error }}\\r\\n            </div>\\r\\n            <div *ngIf=\\\"!token\\\">\\r\\n                Fill in your site key and action to see your token\\r\\n            </div>\\r\\n            <div *ngIf=\\\"token\\\" style=\\\"word-wrap: break-word\\\">\\r\\n                {{ token }}\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { AfterViewInit, Component, OnInit } from '@angular/core';\r\n\r\nimport { ReCaptchaV3Service, ScriptService } from '../../projects/ngx-captcha-lib/src/public_api';\r\n\r\ndeclare var hljs: any;\r\n\r\n@Component({\r\n  selector: 'ngx-recaptcha-3-demo',\r\n  templateUrl: './re-captcha-3-demo.component.html',\r\n})\r\nexport class ReCaptcha3DemoComponent implements OnInit, AfterViewInit {\r\n\r\n  public siteKey?: string = '6Ldb528UAAAAAMD7bdsxQz2gQSl-Jb-kGTyAHThi';\r\n  public action?: string = 'homepage';\r\n  public token?: string;\r\n  public error?: string;\r\n\r\n  public readonly constructorCode = `\r\n  import { ReCaptchaV3Service } from 'ngx-captcha';\r\n\r\n  constructor(\r\n    private reCaptchaV3Service: ReCaptchaV3Service\r\n  ) { }\r\n  `;\r\n\r\n  public readonly methodCode = `\r\n  this.reCaptchaV3Service.execute(this.siteKey, 'homepage', (token) => {\r\n    console.log('This is your token: ', token);\r\n  }, {\r\n    useGlobalDomain: false // optional\r\n  });\r\n  `;\r\n\r\n  constructor(\r\n    private reCaptchaV3Service: ReCaptchaV3Service,\r\n    private scriptService: ScriptService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.highlight();\r\n  }\r\n\r\n  execute(): void {\r\n    this.token = undefined;\r\n\r\n    if (!this.siteKey) {\r\n      this.error = 'Site key is not set';\r\n      return;\r\n    }\r\n\r\n    if (!this.action) {\r\n      this.error = 'Action is not set';\r\n      return;\r\n    }\r\n\r\n    // clean script to make sure siteKey is set correctly (because previous script could be incorrect)\r\n    this.scriptService.cleanup();\r\n\r\n    this.error = undefined;\r\n\r\n    this.reCaptchaV3Service.execute(this.siteKey, 'reCaptcha3DemoPage', (token) => {\r\n      this.token = token;\r\n      console.log('Your token is: ', token);\r\n    }, {\r\n      useGlobalDomain: false\r\n    });\r\n  }\r\n\r\n  private highlight(): void {\r\n    const highlightBlocks = document.getElementsByTagName('code');\r\n    for (let i = 0; i < highlightBlocks.length; i++) {\r\n      const block = highlightBlocks[i];\r\n      hljs.highlightBlock(block);\r\n    }\r\n  }\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Injector,\r\n    Input,\r\n    NgZone,\r\n    OnChanges,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\n\r\nexport abstract class BaseReCaptchaComponent implements OnChanges, ControlValueAccessor, AfterViewInit {\r\n\r\n    /**\r\n    * Prefix of the captcha element\r\n    */\r\n    protected readonly captchaElemPrefix = 'ngx_captcha_id_';\r\n\r\n    /**\r\n    * Google's site key.\r\n    * You can find this under https://www.google.com/recaptcha\r\n    */\r\n    @Input() siteKey: string;\r\n\r\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     */\r\n    @Input() useGlobalDomain: boolean = false;\r\n\r\n    /**\r\n    * Type\r\n    */\r\n    @Input() type: 'audio' | 'image' = 'image';\r\n\r\n    /**\r\n    * Language code. Auto-detects the user's language if unspecified.\r\n    */\r\n    @Input() hl: string;\r\n\r\n    /**\r\n    * Tab index\r\n    */\r\n    @Input() tabIndex = 0;\r\n\r\n    /**\r\n    * Called when captcha receives successful response.\r\n    * Captcha response token is passed to event.\r\n    */\r\n    @Output() success = new EventEmitter<string>();\r\n\r\n    /**\r\n    * Called when captcha is loaded. Event receives id of the captcha\r\n    */\r\n    @Output() load = new EventEmitter<number>();\r\n\r\n    /**\r\n    * Called when captcha is reset.\r\n    */\r\n    @Output() reset = new EventEmitter<void>();\r\n\r\n    /**\r\n    * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n    */\r\n    @Output() ready = new EventEmitter<void>();\r\n\r\n    @ViewChild('captchaWrapperElem') captchaWrapperElem: ElementRef;\r\n    @ViewChild('captchaScriptElem') captchaScriptElem: ElementRef;\r\n\r\n    /**\r\n    * Indicates if captcha should be set on load\r\n    */\r\n    private setupAfterLoad = false;\r\n\r\n    /**\r\n    * Captcha element\r\n    */\r\n    protected captchaElem?: HTMLElement;\r\n\r\n    /**\r\n    * Id of the captcha elem\r\n    */\r\n    protected captchaId?: number;\r\n\r\n    /**\r\n    * Holds last response value\r\n    */\r\n    protected currentResponse?: string;\r\n\r\n    /**\r\n    * If enabled, captcha will reset after receiving success response. This is useful\r\n    * when invisible captcha need to be resolved multiple times on same page\r\n    */\r\n    protected resetCaptchaAfterSuccess = false;\r\n\r\n    /**\r\n    * Captcha type\r\n    */\r\n    protected abstract recaptchaType: ReCaptchaType;\r\n\r\n    /**\r\n    * Required by ControlValueAccessor\r\n    */\r\n    protected onChange: (value: string | undefined) => void;\r\n    protected onTouched: (value: string | undefined) => void;\r\n\r\n    /**\r\n    * Indicates if captcha is loaded\r\n    */\r\n    public isLoaded = false;\r\n\r\n    /**\r\n    * Reference to global reCaptcha API\r\n    */\r\n    public reCaptchaApi?: any;\r\n\r\n    /**\r\n    * Id of the DOM element wrapping captcha\r\n    */\r\n    public captchaElemId?: string;\r\n\r\n    /**\r\n    * Form Control to be enable usage in reactive forms\r\n    */\r\n    public control?: FormControl;\r\n\r\n    protected constructor(\r\n        protected renderer: Renderer2,\r\n        protected zone: NgZone,\r\n        protected injector: Injector,\r\n        protected scriptService: ScriptService,\r\n    ) { }\r\n\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get(NgControl).control;\r\n    }\r\n\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    protected abstract getCaptchaProperties(): any;\r\n\r\n    /**\r\n    * Used for captcha specific setup\r\n    */\r\n    protected abstract captchaSpecificSetup(): void;\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange && (changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n\r\n        this.setupComponent();\r\n    }\r\n\r\n    /**\r\n    * Gets captcha response as per reCaptcha docs\r\n    */\r\n    getResponse(): string {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n\r\n    /**\r\n    * Gets Id of captcha widget\r\n    */\r\n    getCaptchaId(): number | undefined {\r\n        return this.captchaId;\r\n    }\r\n\r\n    /**\r\n    * Resets captcha\r\n    */\r\n    resetCaptcha(): void {\r\n        this.zone.run(() => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n\r\n\r\n            // trigger reset event\r\n            this.reset.next();\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Gets last submitted captcha response\r\n    */\r\n    getCurrentResponse(): string | undefined {\r\n        return this.currentResponse;\r\n    }\r\n\r\n    /**\r\n    * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n    */\r\n    reloadCaptcha(): void {\r\n        this.setupComponent();\r\n    }\r\n\r\n    protected ensureCaptchaElem(captchaElemId: string): void {\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n\r\n    /**\r\n    * Responsible for instantiating captcha element\r\n    */\r\n    protected renderReCaptcha(): void {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular(() => {\r\n            this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n            this.ready.next();\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Called when captcha receives response\r\n    * @param callback Callback\r\n    */\r\n    protected handleCallback(callback: any): void {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n\r\n        this.zone.run(() => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        });\r\n\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n\r\n    private getPseudoUniqueNumber(): number {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n\r\n    private setupComponent(): void {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n\r\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit', (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }, this.hl);\r\n    }\r\n\r\n    /**\r\n    * Called when google's recaptcha script is ready\r\n    */\r\n    private onloadCallback(grecapcha: any): void {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n\r\n        // fire load event\r\n        this.load.next();\r\n\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n\r\n    private generateNewElemId(): string {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n\r\n    private createAndSetCaptchaElem(): void {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\r\n\r\n        // create new wrapper for captcha\r\n        const newElem = this.renderer.createElement('div');\r\n        newElem.id = this.captchaElemId;\r\n\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n\r\n        // update captcha elem\r\n        this.ensureCaptchaElem(this.captchaElemId);\r\n    }\r\n\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\r\n    public writeValue(obj: any): void { }\r\n\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\r\n    public registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    /**\r\n    * At some point we might be interested whether the user has touched our component\r\n    */\r\n    public registerOnTouched(fn: any): void {\r\n        this.onTouched = fn;\r\n    }\r\n}\r\n\r\n","import { Component, forwardRef, Injector, Input, NgZone, OnChanges, Renderer2, SimpleChanges } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\n\r\n@Component({\r\n  selector: 'ngx-invisible-recaptcha',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InvisibleReCaptchaComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class InvisibleReCaptchaComponent extends BaseReCaptchaComponent implements OnChanges {\r\n\r\n  /**\r\n   * This size representing invisible captcha\r\n   */\r\n  protected readonly size = 'invisible';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n   * Badge\r\n   */\r\n  @Input() badge: 'bottomright' | 'bottomleft' | 'inline' = 'bottomright';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  /**\r\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n   */\r\n  execute(): void {\r\n    // execute captcha\r\n    this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n  }\r\n\r\n  /**\r\n  * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n      'badge': this.badge,\r\n      'type': this.type,\r\n      'tabindex': this.tabIndex,\r\n      'size': this.size,\r\n      'theme': this.theme\r\n    };\r\n  }\r\n}\r\n\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\n\r\n@Component({\r\n  selector: 'ngx-recaptcha2',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ReCaptcha2Component),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class ReCaptcha2Component extends BaseReCaptchaComponent implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n  * Name of the global expire callback\r\n  */\r\n  protected readonly windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n\r\n  /**\r\n  * Name of the global error callback\r\n  */\r\n  protected readonly windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n  * Size\r\n  */\r\n  @Input() size: 'compact' | 'normal' = 'normal';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  /**\r\n  * Expired callback\r\n  */\r\n  @Output() expire = new EventEmitter<void>();\r\n\r\n  /**\r\n  * Error callback\r\n  */\r\n  @Output() error = new EventEmitter<void>();\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.ReCaptcha2;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService,\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    window[this.windowOnErrorCallbackProperty] = {};\r\n    window[this.windowOnExpireCallbackProperty] = {};\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n    this.registerCallbacks();\r\n  }\r\n\r\n  /**\r\n   * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n      'theme': this.theme,\r\n      'type': this.type,\r\n      'size': this.size,\r\n      'tabindex': this.tabIndex\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Registers global callbacks\r\n  */\r\n  private registerCallbacks(): void {\r\n    window[this.windowOnErrorCallbackProperty] = this.handleErrorCallback.bind(this);\r\n    window[this.windowOnExpireCallbackProperty] = this.handleExpireCallback.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Handles error callback\r\n  */\r\n  private handleErrorCallback(): void {\r\n    this.zone.run(() => {\r\n      this.onChange(undefined);\r\n      this.onTouched(undefined);\r\n    });\r\n\r\n    this.error.next();\r\n  }\r\n\r\n  /**\r\n   * Handles expired callback\r\n   */\r\n  private handleExpireCallback(): void {\r\n    this.expire.next();\r\n\r\n    // reset captcha on expire callback\r\n    this.resetCaptcha();\r\n  }\r\n}\r\n\r\n","export * from './components/base-recaptcha.component';\r\nexport * from './components/invisible-recaptcha.component';\r\nexport * from './components/recaptcha-2.component';\r\nexport * from './models/recaptcha-type.enum';\r\nexport * from './services/script.service';\r\nexport * from './services/recaptcha_v3.service';\r\nexport * from './ngx-captcha.module';\r\n\r\n","export enum ReCaptchaType {\r\n\r\n    InvisibleReCaptcha,\r\n    ReCaptcha2\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { InvisibleReCaptchaComponent } from './components/invisible-recaptcha.component';\r\nimport { ReCaptcha2Component } from './components/recaptcha-2.component';\r\nimport { ReCaptchaV3Service } from './services/recaptcha_v3.service';\r\nimport { ScriptService } from './services/script.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    ReCaptcha2Component,\r\n    InvisibleReCaptchaComponent\r\n  ],\r\n  providers: [\r\n    ScriptService,\r\n    ReCaptchaV3Service\r\n  ],\r\n  exports: [\r\n    ReCaptcha2Component,\r\n    InvisibleReCaptchaComponent\r\n  ]\r\n})\r\nexport class NgxCaptchaModule {\r\n}\r\n\r\n\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\nimport { ScriptService } from './script.service';\r\n\r\n@Injectable()\r\nexport class ReCaptchaV3Service {\r\n\r\n    constructor(\r\n        protected scriptService: ScriptService,\r\n        protected zone: NgZone\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     */\r\n    execute(siteKey: string, action: string, callback: (token: string) => void, config?: {\r\n        useGlobalDomain: boolean\r\n    }): void {\r\n\r\n        const useGlobalDomain = config && config.useGlobalDomain ? true : false;\r\n\r\n        this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, (grecaptcha) => {\r\n            this.zone.runOutsideAngular(() => {\r\n                grecaptcha.execute(siteKey, {\r\n                    action: action\r\n                }).then((token) => {\r\n                    this.zone.run(() => callback(token));\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\ndeclare var document: any;\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n\r\n    /**\r\n     * Name of the global google recaptcha script\r\n     */\r\n    protected readonly windowGrecaptcha = 'grecaptcha';\r\n\r\n    /**\r\n    * Name of the global callback\r\n    */\r\n    protected readonly windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\r\n\r\n    protected readonly globalDomain: string = 'recaptcha.net';\r\n\r\n    protected readonly defaultDomain: string = 'google.com';\r\n\r\n    constructor(\r\n        protected zone: NgZone,\r\n    ) {\r\n    }\r\n\r\n    registerCaptchaScript(useGlobalDomain: boolean, render: string, onLoad: (grecaptcha: any) => void, language?: string): void {\r\n        if (this.grecaptchaScriptLoaded()) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            this.zone.run(() => {\r\n                onLoad(window[this.windowGrecaptcha]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        window[this.windowOnLoadCallbackProperty] = <any>(() => this.zone.run(\r\n            onLoad.bind(this, window[this.windowGrecaptcha])\r\n        ));\r\n\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n\r\n    cleanup(): void {\r\n        window[this.windowOnLoadCallbackProperty] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\r\n    private grecaptchaScriptLoaded(): boolean {\r\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets language param used in script url\r\n     */\r\n    private getLanguageParam(hl?: string): string {\r\n        if (!hl) {\r\n            return '';\r\n        }\r\n\r\n        return `&hl=${hl}`;\r\n    }\r\n\r\n    /**\r\n    * Url to google api script\r\n    */\r\n    private getCaptchaScriptUrl(useGlobalDomain: boolean, render: string, language?: string): string {\r\n        const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\r\n\r\n        // tslint:disable-next-line:max-line-length\r\n        return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n\r\n}\r\n","/*\r\n * Public API\r\n */\r\n\r\nexport * from './lib/index';\r\n"],"sourceRoot":""}